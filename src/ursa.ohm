// Ursa grammar.
// Â© Reuben Thomas 2023
// Released under the MIT license.

Ursa {
  Sequence = ListOf<Exp, #sc> #sc

  // A semicolon is "automatically inserted" if a newline or the end of the input stream is
  // reached, or the offending token is "}".
  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a
  // lexical rule, or inside `#()`.
  sc = space* (";" | end)
     | spacesNoNL (lineTerminator | &"}")

  // Optional final comma for comma-separated lists.
  maybeCommaParen = space* ("," | &")")
  maybeCommaBracket = space* ("," | &"]")
  maybeCommaBrace = space* ("," | &"}")

  PrimaryExp
    = null              -- null
    | bool
    | string
    | literalString
    | number
    | continue          -- continue
    | ident             -- ident
    | List
    | Object
    | Map
    | Block
    | "(" Exp ")"       -- paren

  List = "[" ListOf<AssignmentExp, ","> #maybeCommaBracket "]"

  Object = "{" ListOf<PropertyValue, ","> #maybeCommaBrace "}"
  PropertyValue = ident ":" Exp

  Map = "{" ListOf<KeyValue, ","> #maybeCommaBrace "}"
  KeyValue = Exp ":" Exp

  PropertyExp
    = PropertyExp "[" Exp "]"           -- index
    | PropertyExp "." ident             -- property
    | Fn
    | PrimaryExp

  CallExp
    = CallExp "[" Exp "]"   -- index
    | CallExp "." ident     -- property
    | CallExp Arguments     -- call
    | PropertyExp Arguments -- property_call
  Arguments = "(" ListOf<Exp, ","> #maybeCommaParen ")"

  LvalueExp
    = CallExp
    | PropertyExp

  Ifs = NonemptyListOf<If, else> (else Block)?
  If = if Exp Block

  Fn = fn "(" ListOf<ident, ","> #maybeCommaParen ")" Block

  Loop = loop Block

  UnaryExp
    = break Exp?      -- break
    | return Exp?     -- return
    | not Exp         -- not
    | "~" UnaryExp    -- bitwise_not
    | "+" UnaryExp    -- pos
    | "-" UnaryExp    -- neg
    | LvalueExp

  ExponentExp
    = UnaryExp "**" ExponentExp  -- power
    | UnaryExp

  ProductExp
    = ProductExp "*" ExponentExp  -- times
    | ProductExp "/" ExponentExp  -- divide
    | ProductExp "%" ExponentExp  -- mod
    | ExponentExp

  SumExp
    = SumExp "+" ProductExp  -- plus
    | SumExp "-" ProductExp  -- minus
    | ProductExp

  CompareExp
    = CompareExp "==" SumExp -- eq
    | CompareExp "!=" SumExp -- neq
    | CompareExp "<"  SumExp -- lt
    | CompareExp "<=" SumExp -- leq
    | CompareExp ">"  SumExp -- gt
    | CompareExp ">=" SumExp -- geq
    | SumExp

  BitwiseExp
    = BitwiseExp "&" CompareExp   -- and
    | BitwiseExp "^" CompareExp   -- xor
    | BitwiseExp "|" CompareExp   -- or
    | BitwiseExp "<<" CompareExp  -- lshift
    | BitwiseExp ">>" CompareExp  -- arshift
    | BitwiseExp ">>>" CompareExp -- lrshift
    | CompareExp

  LogicExp
    = LogicExp and BitwiseExp -- and
    | LogicExp or BitwiseExp  -- or
    | BitwiseExp

  AssignmentExp
    = LvalueExp ":=" AssignmentExp -- ass
    | LogicExp

  Exp
    = Ifs
    | Loop
    | AssignmentExp
    | Lets
    | Use

  Lets = NonemptyListOf<Let, and>
  Let = let ident "=" Exp

  Use = use ListOf<ident, #".">

  Block = "{" Sequence "}"

  // Convenience rules for parsing keyword tokens.
  and = "and" ~identifierPart
  break = "break" ~identifierPart
  continue = "continue" ~identifierPart
  else = "else" ~identifierPart
  fn = "fn" ~identifierPart
  if = "if" ~identifierPart
  let = "let" ~identifierPart
  loop = "loop" ~identifierPart
  or = "or" ~identifierPart
  not = "not" ~identifierPart
  return = "return" ~identifierPart
  use = "use" ~identifierPart

  keyword = and | break | continue | else | fn | if | let | loop | or | not | return | use

  reservedWord = bool | null | keyword

  // Make ident indirect so we can easily get a node with the whole identifier.
  ident = identName
  identName = ~reservedWord identifierStart identifierPart*
  identifierStart = letter | "_"
  identifierPart = identifierStart | digit

  null = "null" ~identifierPart

  bool = ("false" | "true") ~identifierPart

  number
    = digit* "." digit+  -- fract
    | digit+             -- whole

  string = "\"" stringCharacter* "\""
  stringCharacter
    = ~("\"" | "\\") any     -- nonEscaped
    | "\\" escapeSequence    -- escaped
  escapeSequence
    = unicodeEscapeSequence
    | hexEscapeSequence
    | characterEscapeSequence  // Must come last.
  characterEscapeSequence
    = singleEscapeCharacter
    | nonEscapeCharacter
  singleEscapeCharacter =
    "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
  nonEscapeCharacter
    = ~escapeCharacter any
  escapeCharacter
    = singleEscapeCharacter | digit | "x" | "u"
  hexEscapeSequence
    = "x" hexDigit hexDigit
  unicodeEscapeSequence
    = "u" hexDigit hexDigit hexDigit hexDigit
  lineTerminator
    = "\n" | "\r" | "\u2028" | "\u2029"
  lineTerminatorSequence
    = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"

  literalString
    = "r\"" (~"\"" any)* "\""
    | "r#\"" (~"\"#" any)* "\"#"
    | "r##\"" (~"\"##" any)* "\"##"
    | "r###\"" (~"\"###" any)* "\"###"
    | "r####\"" (~"\"####" any)* "\"####"

  comment = blockComment | lineComment
  blockComment = "/*" (~("*/" | "/*") any)* blockComment? (~"*/" any)* "*/"
  lineComment = "//" (~lineTerminator any)*

  // Override Ohm's built-in definition
  space := whitespace | lineTerminator | comment

  // Does not accept lineTerminators
  spacesNoNL = (whitespace | comment)*

  whitespace
    = "\t"
    | "\x0B"    -- verticalTab
    | "\x0C"    -- formFeed
    | " "
    | "\u00A0"  -- noBreakSpace
    | "\uFEFF"  -- byteOrderMark
    | unicodeSpaceSeparator

  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
}
